(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (eval (x xs)))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (eval (x xs)))
(printfoo (println "Yo"))
(println "Hi")
(println "Hello World")
(print "hello")
print
l
)
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (eval (x xs))))
printfoo
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (eval '(x xs))))
(printfoo (println "yo"))
ls
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (eval '(x))))
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (eval (x))))
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") (do (x))))
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!") x))
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (do (println "Hello World!")) x)
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (println "Hello World!") x)
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (println "Hello World!") x)
(printfoo (println "yo"))
(printfoo (println "yo") (+ 1 1))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x & xs] (println "Hello World!") x xs)
(printfoo (println "yo") (+ 1 1))
(printfoo (println "yo"))
(defn printfoo "Print 'Hello World!' and execute the args passed" [x] (println "Hello World!") x)
(printfoo (println "yo"))
(printfoo (println "yo") (+ 1 1))
(defn printfoo "Print 'Hello World!' and execute the args passed" ([x] (println "Hello World!") x) ([x & xs] (println "Hello World!") x xs))
(printfoo (println "yo") (+ 1 1))
(printfoo (println "yo"))
(printfoo (println "yo") (+ 1 1))
(repl :eval printfoo)
(use clojure.main)
(clojure.main/repl :eval printfoo)
(load-file "src/clojure-quest/core.clj")
(use 'clojure-quest.core)
(printfoo (+ 1 1))
(repl :eval printfoo)
(clojure.main/repl :eval printfoo)
